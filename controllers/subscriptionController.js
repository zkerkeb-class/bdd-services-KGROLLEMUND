const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Cr√©er un abonnement
const createSubscription = async (req, res) => {
    console.log('üöÄ BDD - D√âBUT createSubscription', JSON.stringify(req.body, null, 2));
    try {
        // V√©rifier que l'utilisateur existe
        const userId = req.body.userId;
        const stripeSubscriptionId = req.body.stripeSubscriptionId;
        
        if (userId) {
            console.log(`üîç BDD - V√©rification de l'existence de l'utilisateur ${userId}`);
            const userExists = await prisma.user.findUnique({
                where: { id: userId }
            });
            
            if (!userExists) {
                console.error(`‚ùå BDD - ERREUR: Utilisateur ${userId} non trouv√©`);
                return res.status(404).json({ error: `Utilisateur avec l'ID ${userId} non trouv√©` });
            }
            console.log(`‚úÖ BDD - Utilisateur ${userId} trouv√©`);
            
            // V√©rifier si cet utilisateur a d√©j√† un abonnement (actif ou non)
            console.log(`üîç BDD - V√©rification d'un abonnement existant pour l'utilisateur ${userId}`);
            const existingSubscription = await prisma.subscription.findFirst({
                where: { userId }
            });
            
            if (existingSubscription) {
                console.log(`‚úÖ BDD - Abonnement existant trouv√©, ID: ${existingSubscription.id}`);
                console.log(`üìù BDD - Mise √† jour de l'abonnement existant plut√¥t que d'en cr√©er un nouveau`);
                
                // Si stripeSubscriptionId est diff√©rent et fourni, on met √† jour l'abonnement
                const updateData = {
                    ...req.body
                };
                
                const updatedSubscription = await prisma.subscription.update({
                    where: { id: existingSubscription.id },
                    data: updateData
                });
                
                // Mettre √† jour l'utilisateur avec les nouvelles informations d'abonnement
                await prisma.user.update({
                    where: { id: userId },
                    data: {
                        isSubscribed: true,
                        subscriptionId: stripeSubscriptionId,
                        numSubscriptionId: updatedSubscription.id,
                        subscriptionEndDate: req.body.endDate
                    }
                });
                
                console.log(`‚úÖ BDD - Abonnement mis √† jour et utilisateur mis √† jour`);
                return res.status(200).json(updatedSubscription);
            }
        }
        
        console.log(`üíæ BDD - Cr√©ation de l'abonnement dans la base de donn√©es`);
        const subscription = await prisma.subscription.create({
            data: req.body
        });
        console.log(`‚úÖ BDD - Abonnement cr√©√© avec succ√®s, ID: ${subscription.id}`);
        console.log(`üì¶ BDD - D√©tails de l'abonnement cr√©√©:`, JSON.stringify(subscription, null, 2));
        
        // Mettre √† jour l'utilisateur avec les nouvelles informations d'abonnement
        if (userId && stripeSubscriptionId) {
            console.log(`üìù BDD - Mise √† jour de l'utilisateur ${userId} avec les informations d'abonnement`);
            await prisma.user.update({
                where: { id: userId },
                data: {
                    isSubscribed: true,
                    subscriptionId: stripeSubscriptionId,
                    numSubscriptionId: subscription.id,
                    subscriptionEndDate: req.body.endDate
                }
            });
            console.log(`‚úÖ BDD - Utilisateur mis √† jour avec l'ID d'abonnement ${subscription.id}`);
        }
        
        res.status(201).json(subscription);
        console.log('üèÅ BDD - FIN createSubscription - Succ√®s');
    } catch (error) {
        console.error('‚ùå BDD - ERREUR lors de la cr√©ation de l\'abonnement:', error);
        console.error('üì¶ BDD - Stack trace:', error.stack);
        
        // V√©rifier s'il s'agit d'une erreur de contrainte d'unicit√© (duplicate)
        if (error.code === 'P2002') {
            console.error(`‚ùå BDD - Erreur de contrainte unique sur le champ: ${error.meta?.target}`);
            return res.status(409).json({ 
                error: 'Un abonnement avec ces informations existe d√©j√†',
                field: error.meta?.target
            });
        }
        
        // V√©rifier s'il s'agit d'une erreur de contrainte de relation
        if (error.code === 'P2003') {
            console.error(`‚ùå BDD - Erreur de contrainte de relation: ${error.meta?.field_name}`);
            return res.status(400).json({ 
                error: 'R√©f√©rence invalide',
                field: error.meta?.field_name
            });
        }
        
        res.status(500).json({ 
            error: 'Erreur lors de la cr√©ation de l\'abonnement',
            details: error.message,
            code: error.code
        });
    }
};

// Mettre √† jour un abonnement
const updateSubscription = async (req, res) => {
    console.log(`üöÄ BDD - D√âBUT updateSubscription - internalId: ${req.params.id}`, JSON.stringify(req.body, null, 2));
    try {
        const { id } = req.params; // id est en fait internalId (UUID)
        console.log(`üîç BDD - Mise √† jour de l'abonnement via internalId ${id}`);
        
        // V√©rifier si l'abonnement existe
        const existingSubscription = await prisma.subscription.findFirst({
            where: { internalId: id }
        });
        
        if (!existingSubscription) {
            console.error(`‚ùå BDD - ERREUR: Abonnement avec internalId ${id} non trouv√©`);
            return res.status(404).json({ error: `Abonnement avec l'ID interne ${id} non trouv√©` });
        }
        
        console.log(`üíæ BDD - Mise √† jour de l'abonnement ${existingSubscription.id}`);
        const subscription = await prisma.subscription.update({
            where: { id: existingSubscription.id }, // La mise √† jour se fait sur l'ID num√©rique
            data: req.body
        });
        console.log(`‚úÖ BDD - Abonnement mis √† jour, nouveaux d√©tails:`, JSON.stringify(subscription, null, 2));
        
        res.json(subscription);
        console.log('üèÅ BDD - FIN updateSubscription - Succ√®s');
    } catch (error) {
        console.error('‚ùå BDD - ERREUR lors de la mise √† jour de l\'abonnement:', error);
        console.error('üì¶ BDD - Stack trace:', error.stack);
        res.status(500).json({ 
            error: 'Erreur lors de la mise √† jour de l\'abonnement',
            details: error.message
        });
    }
};

// R√©cup√©rer un abonnement
const getSubscription = async (req, res) => {
    console.log(`üöÄ BDD - D√âBUT getSubscription - ID: ${req.params.id}`);
    try {
        const { id } = req.params;
        console.log(`üîç BDD - Recherche de l'abonnement ${id}`);
        
        const subscription = await prisma.subscription.findUnique({
            where: { id },
            include: { user: true }
        });
        
        if (!subscription) {
            console.error(`‚ùå BDD - Abonnement ${id} non trouv√©`);
            return res.status(404).json({ error: 'Abonnement non trouv√©' });
        }
        
        console.log(`‚úÖ BDD - Abonnement trouv√©:`, JSON.stringify(subscription, null, 2));
        res.json(subscription);
        console.log('üèÅ BDD - FIN getSubscription - Succ√®s');
    } catch (error) {
        console.error('‚ùå BDD - ERREUR lors de la r√©cup√©ration de l\'abonnement:', error);
        console.error('üì¶ BDD - Stack trace:', error.stack);
        res.status(500).json({ 
            error: 'Erreur lors de la r√©cup√©ration de l\'abonnement',
            details: error.message
        });
    }
};

// R√©cup√©rer les abonnements d'un utilisateur
const getUserSubscriptions = async (req, res) => {
    console.log(`üöÄ BDD - D√âBUT getUserSubscriptions - UserID: ${req.params.userId}`);
    try {
        const { userId } = req.params;
        console.log(`üîç BDD - Recherche des abonnements pour l'utilisateur ${userId}`);
        
        // V√©rifier si l'utilisateur existe
        const userExists = await prisma.user.findUnique({
            where: { id: userId }
        });
        
        if (!userExists) {
            console.error(`‚ùå BDD - Utilisateur ${userId} non trouv√©`);
            return res.status(404).json({ error: `Utilisateur avec l'ID ${userId} non trouv√©` });
        }
        
        const subscriptions = await prisma.subscription.findMany({
            where: { userId }
        });
        
        console.log(`‚úÖ BDD - ${subscriptions.length} abonnement(s) trouv√©(s) pour l'utilisateur ${userId}`);
        res.json(subscriptions);
        console.log('üèÅ BDD - FIN getUserSubscriptions - Succ√®s');
    } catch (error) {
        console.error('‚ùå BDD - ERREUR lors de la r√©cup√©ration des abonnements:', error);
        console.error('üì¶ BDD - Stack trace:', error.stack);
        res.status(500).json({ 
            error: 'Erreur lors de la r√©cup√©ration des abonnements',
            details: error.message
        });
    }
};

// R√©cup√©rer un abonnement par ID Stripe
const getSubscriptionByStripeId = async (req, res) => {
    console.log(`üöÄ BDD - D√âBUT getSubscriptionByStripeId - StripeID: ${req.params.stripeId}`);
    try {
        const { stripeId } = req.params;
        const subscription = await prisma.subscription.findFirst({
            where: {
                stripeSubscriptionId: stripeId,
            },
        });
        
        if (!subscription) {
            return res.status(404).json({ error: 'Abonnement non trouv√© avec cet ID Stripe' });
        }
        
        res.json(subscription);
    } catch (error) {
        console.error('‚ùå BDD - ERREUR lors de la r√©cup√©ration de l\'abonnement par ID Stripe:', error);
        res.status(500).json({ 
            error: 'Erreur lors de la r√©cup√©ration de l\'abonnement par ID Stripe',
            details: error.message
        });
    }
};

module.exports = {
    createSubscription,
    updateSubscription,
    getSubscription,
    getUserSubscriptions,
    getSubscriptionByStripeId
}; 